<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>软件测试流程</title>
      <link href="/2018/07/12/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B/"/>
      <url>/2018/07/12/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h3 id="关键词】测试流程、需求分析、测试用例、测试计划、缺陷管理"><a href="#关键词】测试流程、需求分析、测试用例、测试计划、缺陷管理" class="headerlink" title="关键词】测试流程、需求分析、测试用例、测试计划、缺陷管理"></a>关键词】测试流程、需求分析、测试用例、测试计划、缺陷管理</h3><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>一般而言，软件测试从项目确立时就开始了，前后要经过以下一些主要环节：需求分析→测试计划→测试设计→测试环境搭建→测试执行→测试记录→缺陷管理→软件评估→RTM.在进行有关问题阐述前，我们先明确下分工，一般而言，需求分析、测试用例编写、测试环境搭建、测试执行等属于测试开发人员工作范畴，而测试执行以及缺陷提交等属于普通测试人员的工作范畴，测试负责人负责整个测试各个环节的跟踪、实施、管理等。说明：<br>  1．以上流程各环节并未包含软件测试过程的全部，如根据实际情况还可以实施一些测试计划评审、用例评审，测试培训等。在软件正式发行后，当遇到一些严重问题时，还需要进行一些后续维护测试等。<br>  2．以上各环节并不是独立没联系的，实际工作千变万化，各环节一些交织、重叠在所难免，比如编写测试用例的同时就可以进行测试环境的搭建工作，当然也可能由于一些需求不清楚而重新进行需求分析等。这就和我们国家提出建设有中国特色的社会主义国家一样，只所以有中国特色，那是因为国情不一样。所以在实际测试过程中也要做到具体问题具体分析，具体解决。</p><h2 id="二、测试流程"><a href="#二、测试流程" class="headerlink" title="二、测试流程"></a>二、测试流程</h2><h4 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h4><p>需求分析（Requirment Analyzing）应该说是软件测试的一个重要环节，测试开发人员对这一环节的理解程度如何将直接影响到接下来有关测试工作的开展。可能有些人认为测试需求分析无关紧要，这种想法是很不对的。需求分析不但重要，而且至关重要！一般而言，需求分析包括软件功能需求分析、测试环境需求分析、测试资源需求分析等。其中最基本的是软件功能需求分析，测一款软件首先要知道软件能实现哪些功能以及是怎样实现的。比如一款Smartphone包括VoIP、Wi-Fi以及Bluetooth等功能。那我们就应该知道软件是怎样来实现这些功能的，为了实现这些功能需要哪些测试设备以及如何搭建相应测试环境等，否则测试就无从谈起！既然谈了需求分析，那么我们根据什么来分析呢？总不能凭空设想吧。总得说来，做测试需求分析的依据有软件需求文档、软件规格书以及开发人员的设计文档等，相信管理一些规范的公司在软件开发过程中都有这些文档。</p><h4 id="测试计划"><a href="#测试计划" class="headerlink" title="测试计划"></a>测试计划</h4><p>测试计划（Test Plan）一般由测试负责人来编写。测试计划的依据主要是项目开发计划和测试需求分析结果而制定。测试计划一般包括以下一些方面：<br>  1． 测试背景a. 软件项目介绍；b. 项目涉及人员（如软硬件项目负责人等）介绍以及相应联系方式等。<br>  2． 测试依据a. 软件需求文档；b. 软件规格书；c. 软件设计文档；d. 其他，如参考产品等。<br>  3． 测试资源a. 测试设备需求；b. 测试人员需求；c. 测试环境需求；d. 其他。<br>  4． 测试策略a. 采取测试方法；b. 搭建哪些测试环境；c. 采取哪些测试工具以测试管理工具；d. 对测试人员进行培训等。<br>  5． 测试日程a. 测试需求分析；b. 测试用例编写；c. 测试实施，根据项目计划，测试分成哪些测试阶段（如单元测试、集成测试、系统测试阶段，α、β测试阶段等），每个阶段的工作重点以及投入资源等。<br>  6． 其他。测试计划还要包括测试计划编写的日期、作者等信息，计划越详细越好了。计划赶不上变化，一份计划做的再好，当实际实施的时候就会发现往往很难按照原有计划开展。如在软件开发过程中资源匮乏、人员流动等都会对测试造成一定的影响。所以，这些就要求测试负责人能够从宏观上来调控了。在变化面前能够做到应对自如、处乱不惊那是最好不过了。</p><h4 id="测试设计"><a href="#测试设计" class="headerlink" title="测试设计"></a>测试设计</h4><p>测试设计主要包括测试用例编写和测试场景设计两方面。一份好的测试用例对测试有很好的指导作用，能够发现很多软件问题。测试场景设计主要也就是测试环境问题了。</p><h4 id="测试环境搭建"><a href="#测试环境搭建" class="headerlink" title="测试环境搭建"></a>测试环境搭建</h4><p>不同软件产品对测试环境有着不同的要求。如C/S及B/S架构相关的软件产品，那么对不同操作系统，如Windows系列、unix、linux甚至苹果OS等，这些测试环境都是必须的。而对于一些嵌入式软件，如手机软件，如果我们想测试一下有关功能模块的耗电情况，手机待机时间等，那么我们可能就需要搭建相应的电流测试环境了。当然测试中对于如手机网络等环境都有所要求。<br>测试环境很重要，符合要求的测试环境能够帮助我们准确的测出软件问题，并且做出正确的判断。为了测试一款软件，我们可能根据不同的需求点要使用很多不同的测试环境。有些测试环境我们是可以搭建的，有些环境我们无法搭建或者搭建成本很高。不管如何，我们的目标是测试软件问题，保证软件质量。测试环境问题，还是根据具体产品以及开发者的实际情况而采取最经济的方式吧。</p><h4 id="测试执行"><a href="#测试执行" class="headerlink" title="测试执行"></a>测试执行</h4><p>测试执行过程又可以分为以下阶段：单元测试→集成测试→系统测试→出厂测试，其中每个阶段还有回归测试等。从测试的角度而言，测试执行包括一个量和度的问题。也就是测试范围和测试程度的问题。 比如一个版本需要测试哪些方面？每个方面要测试到什么程度？从管理的角度而言，在有限的时间内，在人员有限甚至短缺的情况下，要考虑如何分工，如何合理地利用资源来开展测试。当然还要考虑以下问题：<br>  1． 当测试人员测试的执行不到位、敷衍了事时该如何解决？<br>  2． 测试效率问题，怎样提高测试效率？<br>  3． 根据版本的不同特点是只做验证测试还是采取冒烟测试亦或是系统全面测试？<br>  4． 当测试过程中遇到一些偶然性随机问题该怎样处理？<br>  5． 当版本中出现很多新问题时该怎样对待？测试停止标准？<br>  6． ……总之，测试执行过程中会遇到很多复杂的问题，还是那句话，具体问题具体解决！本文不做过多阐述。</p><h4 id="测试记录"><a href="#测试记录" class="headerlink" title="测试记录"></a>测试记录</h4><p>缺陷记录总的说来包括两方面：由谁提交和缺陷描述。一般而言，缺陷都是谁测试谁提交，当然有些公司可能为了保证所提交缺陷的质量，还会在提交前进行缺陷评估，以确保所提交的缺陷的准确性。在缺陷的描述上，至少要包括以下一些方面内容：<br>序号、标题、预置条件、操作步骤、预期结果、实际结果、注释、严重程度、概率、版本、测试者、测试日期<br>以上是描述一个bug时通常所要描述的内容，当然在实际提交bug时可以根据实际情况进行补充，如附上图片、log文件等。另外，一个版本软件测试完毕，还要根据测试情况出份测试报告，这也是所要经过的一个环节。</p><h4 id="缺陷管理"><a href="#缺陷管理" class="headerlink" title="缺陷管理"></a>缺陷管理</h4><p>缺陷管理方面，很多公司都采取缺陷管理工具来进行管理，常见缺陷管理工具有Test Director、Bugfree等。下图是一个bug从提出到close所经过的一些流程，其他比如keep No action\keep spec等一些状态流程都未包含在内，在此仅做示范说明。<br>注：软件缺陷和bug两者在含义上有着细微差别，本文统称缺陷。件进行测试、评估、发行。</p><h4 id="软件评估"><a href="#软件评估" class="headerlink" title="软件评估"></a>软件评估</h4><p>这里评估指软件经过一轮又一轮测试后，确认软件无重大问题或者问题很少的情况下，对准备发给客户的软件进行评估，以确定是否能够发行给客户或投放市场。软件评估小组一般由项目负责人、营销人员、部门经理等组成，也可能是由客户指定的第三方人员组成。</p><h4 id="测试总结"><a href="#测试总结" class="headerlink" title="测试总结"></a>测试总结</h4><p>每个版本有每个版本的测试总结，每个阶段有每个阶段的测试总结，当项目完成RTM后，一般要对整个项目做个回顾总结，看有哪些做的不足的地方，有哪些经验可以对今后的测试工作做借鉴使用，等等。测试总结无严格格式、字数限制。应该说，测试总结还是很总要的。</p><h4 id="测试维护"><a href="#测试维护" class="headerlink" title="测试维护"></a>测试维护</h4><p>由于测试的不完全性，当软件正式release后，客户在使用过程中，难免遇到一些问题，有的甚至是严重性的问题，这就需要修改有关问题，修改后需要再次对软件进行测试、评估、发行。</p>]]></content>
      
      
        <tags>
            
            <tag> 测试基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>测试常识55点</title>
      <link href="/2018/07/12/%E6%B5%8B%E8%AF%95%E5%B8%B8%E8%AF%8655%E7%82%B9/"/>
      <url>/2018/07/12/%E6%B5%8B%E8%AF%95%E5%B8%B8%E8%AF%8655%E7%82%B9/</url>
      <content type="html"><![CDATA[<p>1、你的测试职业发展是什么？<a id="more"></a><br>测试经验越多，测试能力越高。所以我的职业发展是需要时间积累的，一步步向着高级测试工程师奔去。而且我也有初步的职业规划，前3年积累测试经验，按如何做好测试工程师的要点去要求自己，不断更新自己改正自己，做好测试任务。</p><p>2、你认为测试人员需要具备哪些素质<br>做测试应该要有一定的协调能力，因为测试人员经常要与开发接触处理一些问题，如果处理不好的话会引起一些冲突，这样的话工作上就会不好做。还有测试人员要有一定的耐心，有的时候做测试很枯燥乏味。除了耐心，测试人员不能放过每一个可能的错误。</p><p>3、你为什么能够做测试这一行<br>虽然我的测试技术还不是很成熟，但是我觉得我还是可以胜任软件测试这个工作的，因为做软件测试不仅是要求技术好，还有有一定的沟通能力，耐心、细心等外在因素。综合起来看我认为我是胜任这个工作的。</p><p>4、测试的目的是什么？<br>测试的目的是找出软件产品中的错误，是软件尽可能的符合用户的要求。当然软件测试是不可能找出全部错误的。</p><p>5、测试分为哪几个阶段？<br>一般来说分为5个阶段：单元测试、集成测试、确认测试、系统测试、验收测试</p><p>6、单元测试的测试对象、目的、测试依据、测试方法？<br>　　测试对象是模块内部的程序错误，目的是消除局部模块逻辑和功能上的错误和缺陷。测试依据是模块的详细设计，测试方法是采用白盒测试。</p><p>7、怎样看待加班问题<br>　　加班的话我没有太多意见，但是我还是觉得如果能够合理安排时间的话，不会有太多时候加班的。</p><p>8、结合你以前的学习和工作经验，你认为如何做好测试。<br>　　根据我以前的工作和学习经验，我认为做好工作首先要有一个良好的沟通，只有沟通无障碍了，才会有好的协作，才会有更好的效率，再一个就是技术一定要过关，做测试要有足够的耐心，和一个良好的工作习惯，不懂的就要问，实时与同事沟通这样的话才能做好测试工作。</p><p>9、你为什么选择软件测试行业<br>　　因为之前了解软件测试这个行业，觉得他的发展前景很好。</p><p>10、根据你以前的工作或学习经验描述一下软件开发、测试过程，由哪些角色负责，你做什么</p><p>11、根据你的经验说说你对软件测试/质量保证的理解<br>　　软件质量保证与测试是根据软件开发阶段的规格说明和程序的内部结构而精心设计的一批测试用例(即输入数据和预期的输出结果)，并根据这些测试用例去运行程序，以发现错误的过程。它是对应用程序的各个方面进行测试以检查其功能、语言有效性及其外观排布。</p><p>12、软件测试的流程是什么？<br>　　需求调查：全面了解系统概况、应用领域、软件开发周期、软件开发环境、开发组织、时间安排、功能需求、性能需求、质量需求及测试要求等。根据系统概况进行项目所需的人员、时间和工作量估计以及项目报价。<br>　　制定初步的项目计划。<br>　　测试准备：组织测试团队、培训、建立测试和管理环境等。<br>　　测试设计：按照测试要求进行每个测试项的测试设计，包括测试用例的设计和测试脚本的开发等。<br>　　测试实施：按照测试计划实施测试。<br>　　测试评估：根据测试的结果，出具测试评估报告。<br>13、你对SQA的职责和工作活动(如软件度量)的理解?<br>　　SQA就是独立于软件开发的项目组，通过对软件开发过程的监控，来保证软件的开发流程按照指定的CMM规程(如果有相应的CMM规程),对于不符合项及时提出建议和改进方案，必要时可以向高层经理汇报以求问题的解决。通过这样的途径来预防缺陷的引入，从而减少后期软件的维护成本。SQA主要的工作活动包括制定SQA工作计划，参与阶段产物的评审，进行过程质量、功能配置及物理配置的审计等；对项目开发过程中产生的数据进行度量等等。</p><p>14、说说你对软件配置管理的理解<br>　　项目在开发过程中要用相应的配置管理工具对配置项(包括各个阶段的产物)进行变更控制，配置管理的使用取决于项目规模和复杂性及风险的水平。软件的规模越大，配置管理就越显得重要。还有在配置管理中，有一个很重要的概念，那就是基线，是在一定阶段各个配置项的组合，一个基线就提供了一个正式的标准，随后的工作便基于此标准，并只有经过授权后才能变更这个标准。配置管理工具主要有CC，VSS,CVS,SVN等，我只用过SVN，对其他的工具不是很熟悉。</p><p>15、怎样写测试计划和测试用例<br>　　简单点，测试计划里应有详细的测试策略和测试方法，合理详尽的资源安排等，至于测试用例，那是依赖于需求(包括功能与非功能需求)是否细化到功能点，是否可测试等。<br>16、说说主流的软件工程思想(如CMM、CMMI、RUP,XP,PSP,TSP等)的大致情况及对他们的理解<br>　　RUP:rational unified process是软件工程话过程。<br>　　XP:extreme program，即极限编程的意思，适用于小型团队的软件开发，像上面第三个问题就可以结合原型法采用这样的开发流程。要明白测试对于xp开发的重要性，强调测试(重点是单元测试)先行的理念。编程可以明显提高代码的质量，持续集成对于快速定位问题有好处。<br>　　PSP，TSP分别是个体软件过程和群体软件过程。大家都知道，CMM只是告诉你做什么但并没有告诉你如何做，所以PSP/TSP就是告诉你企业在实施CMM的过程中如何做，PSP强调建立个人技能(如何制定计划、控制质量及如何与其他人相互协作等等)。而TSP着重于生产并交付高质量的软件产品(如何有效的规划和管理所面临的项目开发任务等等)。总之，实施CMM，永远不能真正做到能力成熟度的提升，只有将实施CMM与实施PSP和TSP有机结合起来，才能发挥最大的效力。因此，软件过程框架应该是CMM/PSP/TSP的有机集成。</p><p>17、你是怎样保证软件质量的，也就是说你觉得怎样才能最大限度的保证软件的质量？<br>　　测试并不能够最大限度的保证软件的质量，软件的高质量是开发和设计出来的，而不是测试出来的，它不仅要通过对软件开发流程的监控，使得软件开发的各个阶段都要按照指定的规程进行，通过对各个阶段产物的评审，QA对流程的监控，对功能及配置的审计来达到开发的最优化。当然测试也是保证软件质量的一个重要方式，是软件质量保证工程的一个重要组成部分。</p><p>18、基于目前中国的国情，大多数公司的项目进度紧张、人员较少、需求文档根本没有或者很不规范，你认为在这种情况下怎样保证软件的质量？(大多数公司最想知道的就是在这种困难面前你该怎么保证软件的质量，因为这些公司一般就是这种情况–既不想投入过多又想保证质量)<br>　　出现以上的情况，如果仅仅想通过测试来提高软件质量，那几乎是不可能的，原因是没有足够的时间让你去测试，少而不规范的文档导致测试需求无法细化到足够且有针对行的测试。所以，作为公司质量保证的因该和项目经理确定符合项目本身是和的软件生命周期模型(比如RUP的建材，原型法)，明确项目的开发流程并督促项目组按照此流程开展工作，所有项目组成员(项目经理更加重要)都要制定出合理的工作计划，加强代码的单元测试，在客户既定的产品交付日期范围内，进行产品的持续集成等等，如果时间允许可以再配合客户进行必要的系统功能测试。</p><p>19、一个测试工程师应该具备哪些素质和技能？<br>　　1-掌握基本的测试基础理论<br>　　2-本着找出软件存在的问题的态度进行测试，不要以挑刺的形象出现<br>　　3-可熟练阅读需求规格说明书等文档<br>　　4-以用户的观点看问题<br>　　5-有强烈的质量意识<br>　　6-细心和责任心<br>　　7-良好的有效的沟通方式(与开发人员及客户)<br>　　8-具有以往的测试经验能够及时准确的判断出高危险区在何处</p><p>20、做好软件测试的一些关键点<br>　　1-测试人员必须经过测试基础知识和理论的相关培训<br>　　2-测试人员必须熟悉系统功能和业务<br>　　3-测试要有计划，而且测试方案要和整个项目计划协调好<br>　　4-必须实现编写测试用例，测试执行阶段必须根据测试用例进行<br>　　5-易用性，功能，分支，边界，性能等功能行和非功能性需求都要进行测试<br>　　6-对于复杂的流程一定要进行流程分支，组合条件分析，再进行等价类划分准备相关测试数据<br>　　7-测试设计的一个重要内容是要准备好具体的测试数据，清楚这个测试数据是测试那个场景或分支的。<br>　　8-个人任务平均每三个测试用例至少应该发现一个BUG，否则只能说明测试用例质量不好<br>　　9-除了每天构建的重复测试可以考虑测试自动化外，其他暂时都不要考虑去自动话</p><p>21、软件测试员自身素质培养<br>　　1-首先，应对软件测试感兴趣和对自己有自信，如果具备了这两点，那么在开发过程中不管遇到什么样的困难，相信一定能克服<br>　　2-善于怀疑，实际上没有绝对正确的，总有错误的地方，具有叛逆心理，别人认为不可能发生的事情，我却认为可能发生，别人认为是对的，我却认为不是对的。<br>　　3-打破沙锅问到底的精神，对于只出现过一次的BUG一定要找出原因，不解决誓不罢休。<br>　　4-保持一个良好的心情，否则可能无法把测试做好。不要把生活中的不愉快的情绪带到工作中来。<br>　　5-做测试时要细心，不是所有的BUG都能很容易找出，一定要细心才能找到这些BUG。<br>　　6-灵活一些，聪明一点，多造一些容易产生BUG的例子。<br>　　7-在有条件的情况下，多和客户沟通，他们身上有你所需要的。<br>　　8-设身处地为客户着想，从他们的角度去测试系统。<br>　　9-不要让程序员，以“这种情况不可能发生”这句话说服你，相反，你应该去说服他，告诉他在客户心理，并不是这样的<br>　　10-考虑问题要全面，结合客户的需求，业务流程和系统的架构等多方面考虑问题。<br>　　11-提出问题不要复杂化，这点和前面矛盾，如果你是一个新手，暂时不要管这点，因为最终将有你的小组成员讨论解决。<br>　　12-追求完美，对于新测试员来说，努力追求完美，这对你很好，尽管有些事情无法做到，但你应该尝试。<br>　　13-幽默感，能和开发小组很好的沟通是关键，试着给你的开发小组找一个BUG杀手，或对他们说“我简直不敢相信，你写的程序居然到现在没有找到BUG”。</p><p>22、为什要在一个团队中开展测试工作？<br>　　因为没有经过测试的软件很难在发布之前知道该软件的质量，就好比ISO质量认证一样，测试同样也需要质量认证，这个时候就需要在团队中开展软件测试的工作。在测试的过程中发现软件中存在的问题，及时让开发人员得知并修改问题，在即将发布时，从测试报告中得出软件的质量情况。</p><p>23、你所熟悉的软件测试类型有哪些?<br>　　测试类型有：功能测试、性能测试、界面测试<br>　　功能测试在测试工作中占有比例最大，功能测试也叫黑盒测试。<br>　　性能测试是通过自动化的测试工具模拟多种正常、峰值以及异常负载条件来对系统的各项性能指标进行测试。负载测试和压力测试都属于性能测试，两者可以结合进行。<br>　　界面测试，界面是软件与用户交互的最直接的层，界面的好坏决定用户对软件的第一印象。<br>　　区别在于，功能测试关注产品的所有功能，要考虑到每个细节功能，每个可能存在的功能问题。性能测试主要关注产品整体的多用户并发下的稳定性和健壮性。界面测试则关注与用户体验相关内容，用户使用该产品的时候是否已用，是否易懂，是否规范(用户无意输入无效的数据，当然考虑到体验性，不能太粗鲁的弹出警告)。做某个性能测试的时候，首先它可能是个功能点，首先要保证她的功能是没有问题的，然后再考虑性能的问题。</p><p>24、你认为做好测试用例设计工作的关键是什么<br>　　白盒测试用例设计的关键是以较少的用例覆盖尽可能多的内部程序逻辑结构。黑盒测试用例设计的关键同样也是以较少的用例覆盖模块输出和输入接口。不可能做到完全测试，以最少的用例在合理的时间内发现最多的问题。软件的黑盒测试意味着测试要在软件的接口处进行，这种方法是把测试对象看作是一个黑盒子，测试人员完全不考虑程序内部的逻辑结构和内部特性，只依据程序的需求规格说明书，检查程序的功能是否符合它的功能说明。因此黑盒测试又叫功能测试或者数据驱动测试。黑盒测试主要是为了发现以下几类错误：、<br>　　1-是否有不正确或遗漏的功能<br>　　2-在接口上，输入是否能正确的接受？能否输出正确的结果。<br>　　3-是否有数据结构错误或外部信息(例如数据文件)访问错误<br>　　4-性能上是否能够满足要求<br>　　5-是否有初始化或终止性错误<br>　　软件的白盒测试是对软件的过程性细节做细致的检查。这种方法是把测试对象看作一个打开的盒子，它允许测试人员利用程序内部的逻辑结构和有关信息，设计或者选择测试用例，对程序所有逻辑路径进行测试。通过在不同点检查程序状态，确定实际状态是否与预期的状态一直。因此白盒测试又称为结合测试或逻辑驱动测试。白盒测试主要是想对程序模块进行如下检查：<br>　　1-对程序模块的所有独立的执行路径至少测试一遍。<br>　　2-对所有的逻辑判定，取“真”与取“假”的两种情况都能至少测一遍。<br>　　3-在循环的边界和运行的界限内执行循环体。<br>　　4-测试内部数据结构的有效性，等等。</p><p>25、请详细介绍一下各种测试类型的含义<br>　　1-单元测试(模块测试)是开发者编写的一小段代码，用于检验被测试代码的一个很小的、很明确的功能是否正确。通常而言，一个单元测试是用于判断某个特定条件(或者场景)下某个特定函数的行为。单元测试是由程序员自己来完成，最终受益的也是程序员自己。可以这么说，程序员有责任编写功能代码，同时也就有责任为自己的代码编写单元测试。执行单元测试，就是为了证明这段代码的行为和我们期望的一致。<br>　　2-集成测试(也叫组装测试、联合测试)是单元测试的逻辑扩展。它最简单的形式是：两个已经经过测试的单元组合成一个组件，并且测试它们之间的接口。从这一层上讲，组件是指多个单元的集成聚合。在现实方案中，许多单元组合成组件，而这些组件又聚合成程序的更大部分。方法是测试片段的组合，并最终扩展进程，将您的模块与其他组的模块一起测试。最后，将构成进程的所有模块一起测试。<br>　　3-系统测试是将经过测试的子系统装配成一个完整系统来测试。它是检验系统是否确实能提供系统方案说明书中制定功能的有效方法。(常见的联调测试)。系统测试的目的是对最终软件系统进行全面的测试，确保最终软件系统满足产品需求而遵循系统设计。<br>　　4-验收测试是部署软件之前的最后一个测试操作。验收测试的目的是确保软件准备就绪，并且可以让用户将其执行软件的既定功能和任务。验收测试是向未来的用户表明系统能够像预订要求那样工作。经集成测试后，已经按照设计把所有的模块组装成一个完整的软件系统，接口错误也已经基本排除了，接着就应该进一步验证软件的有效性，这就是验收测试的任务，即软件的功能和性能如同用户所合理期待的那样。</p><p>26、测试计划工作的目的是什么？测试计划工作的内容都包括什么？其中哪些是最重要的？<br>　　软件测试计划是知道测试过程的纲领性文件，包含了产品概述、测试策略、测试方法、测试区域、测试配置、测试周期、测试资源、测试交流、风险分析等内容。借助软件测试计划，参与测试的项目成员，尤其是测试管理人员，可以明确测试任务和测试方法，保持测试实施过程的顺畅沟通，跟踪和控制测试进度，应对测试过程中的各种变更。<br>　　测试计划和测试详细规格、测试用例之间是战略和战术的关系，测试计划主要从宏观上规划测试活动的范围、方法和资源配置，而测试详细规格、测试用例是完成测试任务的具体战术。所以其中最重要的是测试策略和测试方法(最好能先评审)。</p><p>27、您认为做好测试计划工作的关键是什么？<br>　　1-明确测试的目标，增强测试计划的实用性<br>　　编写软件测试计划的重要目的就是使测试过程能够发现更多的软件缺陷，因此软件测试计划的价值取决于它对帮助管理测试项目，并且找出软件潜在的缺陷。因此，软件测试计划中的测试范围必须高度覆盖功能需求，测试方法必须切实可行，测试工具并且具有较高的实用性，便于使用，生成的测试结果准确<br>　　2-坚持“5W”规则，明确内容与过程<br>　　“5W”规则指的是“WHAT(做什么)”、“WHY(为什么做)”、”WHEN(何时做)”、”WHERE(在哪里)”、”HOW(如何做)”。利用“5W”规则创建软件测试计划，可以帮助测试团队理解测试的目的(WHY)，明确测试的范围和内容(WHAT)，确定测试的开始和结束日期(WHEN)，指出测试的方法和工具(HOW)，给出测试文档和软件存放的位置(WHERE)。<br>　　3-采用评审和更新机制，保证测试计划满足实际需求<br>　　测试计划完成后，如果没有经过评审，直接发送给测试团队，测试计划内容的可能不准确或遗漏测试内容，或者软件需求变更引起测试范围的增减，而测试计划的内容没有及时更新，误导测试执行人员。<br>　　4-分别创建测试计划与测试详细规格、测试用例<br>　　应把详细的测试技术指标包含到独立创建的测试详细规格文档，把用于指导测试小组执行过程的测试用例放到独立创建的测试用例文档或测试用例管理数据库中。测试计划和测试详细规格、测试用例之间是战略和战术的关系，测试计划主要从宏观上规划测试活动的范围、方法和资源配置，而测试详细规格、测试用例是完成测试任务的具体战术。</p><p>28、当开发人员说不是BUG时，你如何应付？<br>　　开发人员说不是BUG，有2种情况，一是需求没有确定，所以我可以这么做，这个时候可以找来产品经理进行确认，需不需要改动。3方商量确定好后再看要不要改。二是这种情况不可能发生，所以不需要修改，这个时候，我可以先尽可能的说出是BUG的一句是什么？如果被用户发现或出了问题，会有什么不良结果？程序员可能会给你很多理由，你可以对他的解释进行反驳。如果还是不行，那我可以给这个问题提出来，跟开发经理和测试经理进行确认，如果要修改就改，如果不要修改就不改。其实有些真的不是BUG，我也只是建议的方式写进测试文档中，如果开发人员不修改也没有大问题。如果不是BUG的话，一定要坚持自己的立场，让问题得到最后的确认。</p><p>29、你自认为测试的优势在哪里？<br>　　优势在于我对测试坚定不移的信心和热情，虽然经验还不足，但测试需要的基本技能我有信心在工作中得以发挥。</p><p>30、什么是系统瓶颈？<br>　　瓶颈主要是指整个软硬件构成的软件系统某一方面或者几个方面能力不能满足用户的特定业务要求，“特定”是指瓶颈会在某些条件下会出现，因为毕竟大多数系统在投入前。<br>　　严格的从技术角度讲，所有的系统都会有瓶颈，因为大多数系统的资源配置不是协调的，例如CPU使用率刚好达到100％时，内存也正好耗尽的系统不是很多见。因此我们讨论系统瓶颈要从应用的角度讨论：关键是看系统能否满足用户需求。在用户极限使用系统的情况下，系统的响应仍然正常，我们可以认为改系统没有瓶颈或者瓶颈不会影响用户工作。<br>　　因此我们测试系统瓶颈主要是实现下面两个目的：<br>　　-发现“表面”的瓶颈。主要是模拟用户的操作，找出用户极限使用系统时的瓶颈，然后解决瓶颈，这是性能测试的基本目标。<br>　　-发现潜在的瓶颈并解决，保证系统的长期稳定性。主要是考虑用户在将来扩展系统或者业务发生变化时，系统能够适应变化。满足用户目前需求的系统不是最好的，我们设计系统的目标是在保证系统整个软件生命周期能够不断适应用户的变化，或者通过简单扩展系统就可以适应新的变化。</p><p>31、文档测试主要包含什么内容？<br>　　在国内软件开发管理中，文档管理几乎是最弱的一项，因而在测试工作中特别容易忽略文档测试也就不足为奇了。要想给用户提供完整的产品，文档测试是必不可少的。文档测试一般注重下面几个方面：<br>　　文档的完整性：主要是测试文档内容的全面性与完整性，从总体上把握文档的质量。例如用户手册应该包括软件的所有功能模块。<br>　　描述与软件实际情况的一致性：主要测试软件文档与软件实际的一致程度。例如用户手册基本完整后，我们还要注意用户手册与实际功能描述是否一致。因为文档往往跟不上软件版本的更新速度。<br>　　易理解性：主要是检查文档对关键、重要的操作有无图文说明，文字、图表是否易于理解。对于关键、重要的操作仅仅只有文字说明肯定是不够的，应该附有图表使说明更为直观和明了。<br>　　文档中提供操作的实例：这项检查内容主要针对用户手册。对主要功能和关键操作提供的应用实例是否丰富，提供的实例描述是否详细。只有简单的图文说明，而无实例的用户手册看起来就像是软件界面的简单拷贝，对于用户来说，实际上没有什么帮助。<br>　　印刷与包装质量：主要是检查软件文档的商品化程度。有些用户手册是简单打印、装订而成，过于粗糙，不易于用户保存。优秀的文档例如用户手册和技术白皮书，应提供商品化包装，并且印刷精美。</p><p>32、功能测试用例需要详细到什么程度才是合格的？<br>　　这个问题也是测试工程师经常问的问题。有人主张测试用例详细到每个步骤执行什么都要写出来，目的是即使一个不了解系统的新手都可以按照测试用例来执行工作。主张这类写法的人还可以举出例子：欧美、日本等软件外包文档都是这样做的。<br>　　另外一种观点就是主张写的粗些，类似于编写测试大纲。主张这种观点的人是因为软件开发需求管理不规范，变动十分频繁，因而不能按照欧美的高标准来编写测试用例。这样的测试用例容易维护，可以让测试执行人员有更大的发挥空间。<br>　　实际上，软件测试用例的详细程度首先要以覆盖到测试点为基本要求。举个例子：“用户登陆系统”的测试用例可以不写出具体的执行数据，但是至少要写出五种以上情况（），如果只用一句话覆盖了这个功能是不合格的测试用例。覆盖功能点不是指列出功能点，而是要写出功能点的各个方面（如果组合情况较多时可以采用等价划分）。<br>　　另一个影响测试用例的就是组织的开发能力和测试对象特点。如果开发力量比较落后，编写较详细的测试用例是不现实的，因为根本没有那么大的资源投入，当然这种情况很随着团队的发展而逐渐有所改善。测试对象特点重点是指测试对象在进度、成本等方面的要求，如果进度较紧张的情况下，是根本没有时间写出高质量的测试用例的，甚至有些时候测试工作只是一种辅助工作，因而不编写测试用例。<br>　　因此，测试用例的编写要根据测试对象特点、团队的执行能力等各个方面综合起来决定编写策略。最后要注意的是测试人员一定不能抱怨，力争在不断提高测试用例编写水平的同时，不断地提高自身能力。<br>33、配置和兼容性测试的区别是什么？<br>　　配置测试的目的是保证软件在其相关的硬件上能够正常运行，而兼容性测试主要是测试软件能否与不同的软件正确协作。<br>　　配置测试的核心内容就是使用各种硬件来测试软件的运行情况，一般包括：<br>　　（1）软件在不同的主机上的运行情况，例如Dell和Apple；<br>　　（2）软件在不同的组件上的运行情况，例如开发的拨号程序要测试在不同厂商生产的Modem上的运行情况；<br>　　（3）不同的外设；<br>　　（4）不同的接口；<br>　　（5）不同的可选项，例如不同的内存大小；<br>　　兼容性测试的核心内容：<br>　　（1）测试软件是否能在不同的操作系统平台上兼容；<br>　　（2）测试软件是否能在同一操作系统平台的不同版本上兼容；<br>　　（3）软件本身能否向前或者向后兼容；<br>　　（4）测试软件能否与其它相关的软件兼容；<br>　　（5）数据兼容性测试，主要是指数据能否共享；<br>　　配置和兼容性测试通称对开发系统类软件比较重要，例如驱动程序、操作系统、数据库管理系统等。具体进行时仍然按照测试用例来执行。</p><p>34、软件文档测试主要包含什么？<br>　　随着软件文档系统日益庞大，文档测试已经成为软件测试的重要内容。文档测试对象主要如下：<br>　　-包装文字和图形；<br>　　-市场宣传材料、广告以及其它插页；<br>　　-授权、注册登记表；<br>　　-最终用户许可协议；<br>　　-安装和设置向导；<br>　　-用户手册；<br>　　-联机帮助；<br>　　-样例、示范例子和模板；<br>　　-……<br>　　文档测试的目的是提高易用性和可靠性，降低支持费用，因为用户通过文档就可以自己解决问题。因文档测试的检查内容主要如下：<br>　　-读者对象——主要是文档的内容是否能让该级别的读者理解；<br>　　-术语——主要是检查术语是否适合读者；<br>　　-内容和主题——检查主题是否合适、是否丢失、格式是否规范等；<br>　　-图标和屏幕抓图——检查图表的准确度和精确度；<br>　　-样例和示例——是否与软件功能一致；<br>　　-拼写和语法；<br>　　-文档的关联性——是否与其它相关文档的内容一致，例如与广告信息是否一致；<br>　　文档测试是相当重要的一项测试工作，不但要给予充分的重视，更要要认真的完成，象做功能测试一样来对待文档测试。</p><p>35、没有产品说明书和需求文档地情况下能够进行黑盒测试吗？<br>　　这个问题是国内测试工程师经常遇到的问题，根源就是国内软件开发文档管理不规范，对变更的管理方法就更不合理了。实际上没有任何文档的时候，测试人员是能够进行黑盒测试的，这种测试方式我们可以称之为探索测试，具体做法就是测试工程师根据自己的专业技能、领域知识等不断的深入了解测试对象、理解软件功能，进而发现缺陷。<br>　　在这种做法基本上把软件当成了产品说明书，测试过程中要和开发人员不断的进行交流。尤其在作项目的时候，进度压力比较大，可以作为加急测试方案。最大的风险是不知道有些特性是否被遗漏。</p><p>36、测试中的“杀虫剂怪事”是指什么？<br>　　“杀虫剂怪事”一词由BorisBeizer在其编著的《软件测试技术》第二版中提出。用于描述测试人员对同一测试对象进行的测试次数越多，发现的缺陷就会越来越少的现象。就像老用一种农药，害虫就会有免疫力，农药发挥不了效力。这种现象的根本原因就是测试人员对测试软件过于熟悉，形成思维定势。<br>　　为了克服这种现象，测试人员需要不断编写新的测试程序或者测试用例，对程序的不同部分进行测试，以发现更多的缺陷。也可以引用新人来测试软件，刚刚进来的新手往往能发现一些意想不到的问题。</p><p>37、在配置测试中，如何判断发现的缺陷是普通问题还是特定的配置问题？<br>　　在进行配置测试时，测试工程师仍然会发现一些普通的缺陷，也就是与配置环境无关的缺陷。因此判断新发现的问题，需要在不同的配置中重新执行发现软件缺陷的步骤，如果软件缺陷不出现了，就可能是配置缺陷；如果在所有的配置中都出现，就可能是普通缺陷。<br>　　需要注意的是，配置问题可以在一大类配置中出现。例如，拨号程序可能在所有的外置Modem中都存在问题，而内置的Modem不会有任何问题。</p><p>38、为什么尽量不要让时间有富裕的员工去做一些测试？<br>　　表面上看这体现了管理的效率和灵活性，但实际上也体现了管理者对测试的轻视。测试和测试的人有很大关系。测试工作人员应该是勤奋并富有耐心，善于学习、思考和发现问题，细心有条理，总结问题，如果具备这样的优点，做其它工作同样也会很出色，因此这里还有一个要求，就是要喜欢测试这项工作。如果他是专职的，那么肯定更有经验和信心。国内的小伙子好象都喜欢做程序员，两者工作性质不同，待遇不同，地位不同，对自我实现的价值的认识也不同，这是行业的一个需要改善的问题。如果只是为了完成任务而完成任务，或者发现了几个问题就觉得满意了，这在任何其它工作中都是不行的。</p><p>39、完全测试程序是可能的吗？<br>　　软件测试初学者可能认为拿到软件后需要进行完全测试，找到全部的软件缺陷，使软件“零缺陷”发布。实际上完全测试是不可能的。主要有以下一个原因：<br>　　-完全测试比较耗时，时间上不允许；<br>　　-完全测试通常意味着较多资源投入，这在现实中往往是行不通的；<br>　　-输入量太大，不能一一进行测试；<br>　　-输出结果太多，只能分类进行验证；<br>　　-软件实现途径太多；<br>　　-软件产品说明书没有客观标准，从不同的角度看，软件缺陷的标准不同；<br>　　因此测试的程度要根据实际情况确定。</p><p>40、软件测试的风险主要体现在哪里？<br>　　我们没有对软件进行完全测试，实际就是选择了风险，因为缺陷极有可能存在没有进行测试的部分。举个例子，程序员为了方便，在调试程序时会弹出一些提示信息框，而这些提示只在某种条件下会弹出，碰巧程序发布前这些代码中的一些没有被注释掉。在测试时测试工程师又没有对其进行测试。如果客户碰到它，这将是代价昂贵的缺陷，因为交付后才被客户发现。<br>　　因此，我们要尽可能的选择最合适的测试量，把风险降低到最小。</p><p>41、发现的缺陷越多，说明软件缺陷越多吗？<br>　　这是一个比较常见的现象。测试工程师在没有找到缺陷前会绞尽脑汁的思考，但是找到一个后，会接二连三的发现很多缺陷，颇有个人成就感。其中的原因主要如下：<br>　　-代码复用、拷贝代码导致程序员容易犯相同的错误。类的继承导致所有的子类会包含基类的错误，反复拷贝同一代码意味可能也复制了缺陷。<br>　　-程序员比较劳累是可以导致某些连续编写的功能缺陷较多。程序员加班是一种司空见惯的现象，因此体力不只时容易编写一些缺陷较多的程序。而这些连续潜伏缺陷恰恰时测试工程师大显身手的地方。<br>　　“缺陷一个连着一个”不是一个客观规律，只是一个常见的现象。如果软件编写的比较好，这种现象就不常见了。测试人员只要严肃认真的测试程序就可以了。</p><p>42、所有的软件缺陷都能修复吗？所有的软件缺陷都要修复吗？<br>　　从技术上讲，所有的软件缺陷都是能够修复的，但是没有必要修复所有的软件缺陷。测试人员要做的是能够正确判断什么时候不能追求软件的完美。对于整个项目团队，要做的是对每一个软件缺陷进行取舍，根据风险决定那些缺陷要修复。发生这种现象的主要原因如下：<br>　　-没有足够的时间资源。在任何一个项目中，通常情况下开发人员和测试人员都是不够用的，而且在项目中没有预算足够的回归测试时间，再加上修改缺陷可能引入新的缺陷，因此在交付期限的强大压力下，必须放弃某些缺陷的修改。<br>　　-有些缺陷只是特殊情况下出现，这种缺陷处于商业利益考虑，可以在以后升级中进行修复。<br>　　-不是缺陷的缺陷。我们经常会碰到某些功能方面的问题被当成缺陷来处理，这类问题可以以后有时间时考虑再处理。<br>　　最后要说的是，缺陷是否修改要由软件测试人员、项目经理、程序员共同讨论来决定是否修复，不同角色的人员从不同的角度来思考，以做出正确的决定。</p><p>43、软件测试人员就是QA吗？<br>　　软件测试人员的职责是尽可能早的找出软件缺陷，确保得以修复。而质量保证人员（QA）主要职责是创建或者制定标准和方法，提高促进软件开发能力和减少软件缺陷。测试人员的主要工作是测试，质量保证人员日常工作重要内容是检查与评审，测试工作也是测试保证人员的工作对象。<br>　　软件测试和质量是相辅相成的关系，都是为了提高软件质量而工作。</p><p>44、如何减少测试人员跳槽带来的损失？<br>　　在IT行业里跳槽已经是一种司空见惯的现象，而且跳槽无论给公司还是给个人都会带来一定的损失。测试队伍也无疑会面临跳槽的威胁，作为测试经理管理者，只有从日常工作中开始做起，最能最大限度的减少损失。建议我们从以下两个方面做起：<br>　　-加强部门内员工之间的互相学习，互相学习是建立学习型组织的基本要求，是知识互相转移的过程。在此基础上，可以把个人拥有的技术以知识的形式沉积下来，也就完成了隐性知识到显性知识的转化。<br>　　-通常情况下，企业能为员工提供足够大的发展空间时，如果不是待遇特别低，员工都不会主动离开企业。因此我们要想留住员工，管理者就应该把员工的个人成长和企业的发展联系起来，为员工设定合理发展规划并付诸实现。不过这项要求做起来比较，要有比较好的企业文化为依托。</p><p>45、测试产品与测试项目的区别是什么？<br>　　习惯上把开发完成后进行商业化、几乎不进行代码修改就可以售给用户使用的软件成为软件产品，也就是可以买“卖拷贝”的软件，例如Windows2000。而通常把针对一个或者几个特定的用户而开发的软件成为软件项目，软件项目是一种个性化的产品，可以是按照用户要求全部重新开发，也可以修改已有的软件产品来满足特定的用户需求。项目和产品的不同特点，决定我们测试产品和测试项目仍然会有很多不同的地方：<br>　　-质量要求不同。通常产品的质量要高一些，修复发布后产品的缺陷成本较高，甚至会带来很多负面的影响。而做项目通常面向某一用户，虽然质量越高越好，但是一般只要满足用户要求就可以了。<br>　　-测试资源投入多少不同。做软件产品通常是研发中心来开发，进度压力要小些。同时由于质量要求高，因此会投入较多的人力、物力资源。<br>　　-项目最后要和用户共同验收测试，这是产品测试不具有的特点。<br>　　此外，测试产品与测试项目在缺陷管理方面、测试策略制定都会有很大不同，测试管理者应该结合具体的环境，恰如其分的完成工作。<br>46、和用户共同测试（UAT测试）的注意点有哪些？<br>　　软件产品在投产前，通常都会进行用户验收测试。如果用户验收测试没有通过，直接结果就是那不到“Money”，间接影响是损害了公司的形象，而后者的影响往往更严重。根据作者的经验，用户验收测试一定要让用户满意。<br>　　（1）用户现场测试不可能测试全部功能，因此要测试核心功能。这需要提前做好准备，这些核心功能一定要预先经过测试，证明没有问题才可以和用户共同进行测试。测试核心模块的目的是建立用户对软件的信心。当然如果这些模块如果问题较多，不应该进行演示。<br>　　（2）如果某些模块确实有问题，我们可以演示其它重要的业务功能模块，必要时要向用户做成合理的解释。争得时间后，及时修改缺陷来弥补。<br>　　（3）永远不能欺骗用户，蒙混过关。道理很简单，因为软件是要给用户用的，问题早晚会暴露出来，除非你可以马上修改。<br>　　和用户进行测试还要注意各种交流技巧，争取不但短期利益得到了满足，还要为后面得合作打好基础。</p><p>47、如何编写提交给用户的测试报告？<br>　　随着测试工作越来越受重视，开发团队向客户提供测试文档是不可避免的事情。很多人会问：“我们可以把工作中的测试报告提供给客户吗？”答案是否定的。因为提供内部测试报告，可能会让客户失去信心，甚至否定项目。<br>　　测试报告一般分为内部测试报告和外部测试报告。内部报告是我们在测试工作中的项目文档，反映了测试工作的实施情况，这里不过多讨论，读者可以参考相关教材。这里主要讨论一下外部测试报告的写法，一般外部测试报告要满足下面几个要求：<br>　　-根据内部测试报告进行编写，一般可以摘录；<br>　　-不可以向客户报告严重缺陷，即使是已经修改的缺陷，开发中的缺陷也没有必要让客户知道；<br>　　-报告上可以列出一些缺陷，但必须是中级的缺陷，而且这些缺陷必须是修复的；<br>　　-报告上面的内容尽量要真实可靠；<br>　　-整个测试报告要仔细审阅，力争不给项目带来负面作用，尤其是性能测试报告。<br>　　总之，外部测试报告要小心谨慎的编写。</p><p>48、测试工具在测试工作中是什么地位？<br>　　国内的很多测试工程师对测试工具相当迷恋，尤其是一些新手，甚至期望测试工具可以取代手工测试。测试工具在测试工作中起的是辅助作用，一般用来提高测试效率。自动化测试弥补了手工测试的不足，减轻一定的工作量。实际上测试工具是无法替代大多数手工测试的，而一些诸如性能测试等自动化测试也是手工所不能完成的。<br>　　对于自动测试技术，应当依据软件的不同情况来分别对待，一般自动技术会应用在引起大量重复性工作的地方、系统的压力点、以及任何适合使用程序解决大批量输入数据的地方。然后再寻找合适的自动测试工具，或者自己开发测试程序。一定不要为了使用测试工具而使用。</p><p>49、常见的测试用例设计方法都有哪些？请分别以具体的例子来说明这些方法在测试用例设计工作中的应用。<br>　　1-等价类划分<br>　　常见的软件测试面试题划分等价类: 等价类是指某个输入域的子集合.在该子集合中,各个输入数据对于揭露程序中的错误都是等效的.并合理地假定:测试某等价类的代表值就等于对这一类其它值的测试.因此,可以把全部输入数据合理划分为若干等价类,在每一个等价类中取一个数据作为测试的输入条件,就可以用少量代表性的测试数据.取得较好的测试结果.等价类划分可有两种不同的情况:有效等价类和无效等价类.<br>　　2-边界值分析法<br>　　边界值分析方法是对等价类划分方法的补充。测试工作经验告诉我,大量的错误是发生在输入或输出范围的边界上,而不是发生在输入输出范围的内部.因此针对各种边界情况设计测试用例,可以查出更多的错误.<br>　　使用边界值分析方法设计测试用例,首先应确定边界情况.通常输入和输出等价类的边界,就是应着重测试的边界情况.应当选取正好等于,刚刚大于或刚刚小于边界的值作为测试数据,而不是选取等价类中的典型值或任意值作为测试数据.<br>　　3-错误推测法<br>　　基于经验和直觉推测程序中所有可能存在的各种错误, 从而有针对性的设计测试用例的方法.<br>　　错误推测方法的基本思想: 列举出程序中所有可能有的错误和容易发生错误的特殊情况,根据他们选择测试用例-例如, 在单元测试时曾列出的许多在模块中常见的错误-以前产品测试中曾经发现的错误等, 这些就是经验的总结。还有, 输入数据和输出数据为0的情况。输入表格为空格或输入表格只有一行-这些都是容易发生错误的情况。可选择这些情况下的例子作为测试用例.<br>　　4-因果图方法<br>　　前面介绍的等价类划分方法和边界值分析方法,都是着重考虑输入条件,但未考虑输入条件之间的联系, 相互组合等-考虑输入条件之间的相互组合,可能会产生一些新的情况-但要检查输入条件的组合不是一件容易的事情, 即使把所有输入条件划分成等价类,他们之间的组合情况也相当多-因此必须考虑采用一种适合于描述对于多种条件的组合,相应产生多个动作的形式来考虑设计测试用例-这就需要利用因果图（逻辑模型）-因果图方法最终生成的就是判定表-它适合于检查程序输入条件的各种组合情况.<br>　　5-正交表分析法<br>　　有时候，可能因为大量的参数的组合而引起测试用例数量上的激增，同时，这些测试用例并没有明显的优先级上的差距，而测试人员又无法完成这么多数量的测试，就可以通过正交表来进行缩减一些用例，从而达到尽量少的用例覆盖尽量大的范围的可能性。<br>　　6-场景分析方法<br>　　指根据用户场景来模拟用户的操作步骤，这个比较类似因果图，但是可能执行的深度和可行性更好。</p><p>50、您认为做好测试用例设计工作的关键是什么？<br>　　白盒测试用例设计的关键是以较少的用例覆盖尽可能多的内部程序逻辑结果<br>　　黑盒法用例设计的关键同样也是以较少的用例覆盖模块输出和输入接口。不可能做到完全测试，以最少的用例在合理的时间内发现最多的问题</p><p>51、详细的描述一个测试活动完整的过程。<br>　　1-项目经理通过和客户的交流，完成需求文档，由开发人员和测试人员共同完成需求文档的评审，评审的内容包括：需求描述不清楚的地方和可能有明显冲突或者无法实现的功能的地方。项目经理通过综合开发人员，测试人员以及客户的意见，完成项目计划。然后sqa进入项目，开始进行统计和跟踪<br>　　2-开发人员根据需求文档完成需求分析文档，测试人员进行评审，评审的主要内容包括是否有遗漏或者双方理解不同的地方。测试人员完成测试计划文档，测试计划包括的内容上面有描述。<br>　　3-测试人员根据修改好的需求分析文档开始写测试用例，同时开发人员完成概要设计文档，详细设计文档。此两份文档成为测试人员撰写测试用例的补充材料。<br>　　4-测试用例完成后，测试和开发需要进行评审。<br>　　5-测试人员搭建环境<br>　　6-开发人员提交第一个版本，可能存在未完成功能，需要说明。测试人员进行测试，发现bug后提交给bugzilla。<br>　　7-开发提交第二个版本，包括bug fix以及增加了部分功能，测试人员进行测试。<br>　　8-重复上面的工作，一般是3-4个版本后bug数量减少，达到出货的要求。<br>9-如果有客户反馈的问题，需要测试人员协助重现以及回归测试。</p><p>52、以往是否曾经从事过性能测试工作？请尽可能的详细描述您以往的性能测试工作的完整过程。<br>　　曾经做过一套网管系统的性能测试，主要测试该软件在同时管理大量终端的情况下，在响应时间，cpu/磁盘/内存等参数是否满足要求。<br>　　也曾经做过软交换系统的呼叫性能测试，主要是测试软交换系统在有大量呼叫的情况下，响应时间，呼叫成功率，cpu/磁盘/内存等参数是否满足设计要求。</p><p>53、在您以往的工作中，一条软件缺陷（或者叫bug）记录都包含了哪些内容？如何提交高质量的软件缺陷（bug）记录？<br>　　1-在传统的bugzilla中，bug描述应该包括以下的信息<br>　　2-和bug产生对应的软件版本<br>　　3-开发的接口人员<br>　　4-bug的优先级<br>　　5-bug的严重程度<br>　　6-bug可能属于的模块，如果不能确认，可以用开发人员来判断<br>　　7-bug标题，需要清晰的描述现象<br>　　8-bug描述，需要尽量给出重新bug的步骤<br>　　9-bug附件中能给出相关的日志和截图。<br>　　高质量的bug记录就是指很容易理解的bug记录，所以，对于描述的要求高，能提供的信息多且准确，很好的帮助开发人员定位。</p><p>54、您在从事性能测试工作时，是否使用过一些测试工具？如果有，请试述该工具的工作原理，并以一个具体的工作中的例子描述该工具是如何在实际工作中应用的。<br>　　测试网管系统中，使用的mimic来模拟终端，能够大量的节省成本。<br>　　测试软交换系统的时候，使用的prolab来模拟终端并发送呼叫软交换，他完成了同时数百人才能完成的摘机拨号工作，主要工作原理是产生一些符合要求的ip包并发送给软交换系统，同时对软交换系统的回应进行处理，决定下一步动作。</p><p>55、您认为性能测试工作的目的是什么？做好性能测试工作的关键是什么？<br>主要是保障在大量用户的情况下，服务能正常使用。<br>　　<br>注：本文为网友收集的文章，特此借鉴！</p>]]></content>
      
      
        <tags>
            
            <tag> 测试理论知识 </tag>
            
            <tag> 测试基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>三遍读书法</title>
      <link href="/2018/05/27/%E4%B8%89%E9%81%8D%E8%AF%BB%E4%B9%A6%E6%B3%95/"/>
      <url>/2018/05/27/%E4%B8%89%E9%81%8D%E8%AF%BB%E4%B9%A6%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>矛盾曾说过，读名著要读三遍，第一遍很好的把他读完；第二遍要慢慢的读，细细咀嚼；第三遍就要一段段的读，领会运用。<br><a id="more"></a></p><p>第一遍：粗读</p><p>对于一本新书，先大略的读一遍，粗读，全读，快读是第一遍的特点。<br>对文中不认识不理解的内容不去推敲，也不研究，就做个标记，以后处理。但是要把整个文章读完，还要快速读完。</p><p>第二遍：精读</p><p>慢读、细读、深读是第二遍的特点。<br>要放慢读书速度，不认识不理解的内容要查阅资料或者询问别人把问题解决掉。理解作者是写什么，文章强调什么。</p><p>第三遍：消化</p><p>在此前两遍的基础上弄通整本书的意思，然后进行琢磨和思索，并能够学用结合，增强自己对问题的思考和判断解决问题能力。<br>三遍读书法，强调对各类文章和书籍的阅读都要理解和渗透，在此基础上形成记忆。不仅能掌握知识精髓还可以有创新，如果我们能运用这种学习方法，将会很有收获。</p>]]></content>
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>努力，才有更多选择</title>
      <link href="/2018/05/27/%E5%8A%AA%E5%8A%9B%EF%BC%8C%E6%89%8D%E6%9C%89%E6%9B%B4%E5%A4%9A%E9%80%89%E6%8B%A9/"/>
      <url>/2018/05/27/%E5%8A%AA%E5%8A%9B%EF%BC%8C%E6%89%8D%E6%9C%89%E6%9B%B4%E5%A4%9A%E9%80%89%E6%8B%A9/</url>
      <content type="html"><![CDATA[<h3 id="01-努力，我们才有更多选择"><a href="#01-努力，我们才有更多选择" class="headerlink" title="01 努力，我们才有更多选择"></a>01 努力，我们才有更多选择</h3><p>以前在网上，曾看到过这样一个笑话，令人印象深刻：<br>在国内某名校，老教授第一堂课并没讲什么深奥的哲理，而是说了几句看似戏谑又意味深长的话。他说：“女同学嘛，不需要努力的，你只需要嫁个好人家就行了。”<a id="more"></a>全场震惊的同时，他又留下了一句话：“当然了，如果不努力，你又怎能遇到更好的男人呢？能考进我们学校的同学应该都是非常努力的人。”</p><p>努力，不是为了给别人看，而是为了自己有更多的选择权。如何让我们有更多的选择呢？你得非常努力。对于大多数人来说，努力是我们创造选择的唯一途径。而那些不努力的人，只能被动的接收选择。蔡康永说过一段话：<br>【15岁觉得游泳难，放弃游泳，到18岁遇到一个喜欢的人约你去游泳，你只好说‘我不会耶’。18岁觉得英语难，放弃英文，28岁出现一个很棒的工作岗位要求会英语，你只好说‘我不会耶’。】</p><h3 id="02-真正努力的人，从来不焦虑"><a href="#02-真正努力的人，从来不焦虑" class="headerlink" title="02 真正努力的人，从来不焦虑"></a>02 真正努力的人，从来不焦虑</h3><p>努力没有上限，上进心并无尽头。你要求自己每时每刻都要做有意义的事情，看了会电影，刷了会综艺，就开始自责。为了成为“更好”的自己，哪怕一点放松，都是罪恶。所以你发现了吗？努力成为了目标本身。我们原本只是想顺利的通过考试啊，我们的目标，不是学习时间的长短，更不是努力程度的高低。没有上限的目标让我们焦虑不已，一旦停止努力，就会陷入焦虑之中。</p><p>如果把努力视为手段，而非目标，事情就清晰多了。我们需要的，是具体确切的短期目标。比如：今天8点~10点完成第一件事……晚上9点去操场跑五圈……尽量高效高质地完成短期目标，并且及时收到反馈，这才是努力的正确姿势。实现短期的具体目标，带来的完成感和成就感，将我们从焦虑中解救出来。努力本身不是目的，努力多长时间也不是目的，完成具体的任务，才是目标。</p><p>如果一个人对自己所做的事情完全有信心，他就不会焦躁狂热。凡是焦躁狂热的状态，通常都是深层的自卑心作祟。所以你看到的那些学霸，往往看不到他们很拼命读书的感觉，而且通常都是面无表情，非常淡定。而自修室那些头悬梁锥刺股的人，往往都是临时抱佛脚者。</p><p>我们焦虑的，不是我们不努力，而是比你优秀的人，比你还努力。你要做的就是清楚自己的方向在哪里，对准自己的目标，一步一步的走下去。不断的给自己信心，直到感动自己。<br>真正努力的人，从来不焦虑，因为他们没时间去焦虑。</p><h3 id="03-努力，成为更好的自己"><a href="#03-努力，成为更好的自己" class="headerlink" title="03 努力，成为更好的自己"></a>03 努力，成为更好的自己</h3><p>当我们在做一件事的时候，先不去想着成功与否会怎么样。</p><p>成功当然很爽，但如果不成功，我们是否还会享受当下做的事？</p><p>如果是，我认为那就是真正的成功。因为，你已经不需要依赖外界的承认，已经获得内心的满足。只要我自己认可自己，一切都是完满的。</p><p>我们的人生长跑中，应该坚持两个原则：一是自己永远不放弃自己，永远充满快乐去向前奔跑，只要向前，就会跑的比现在远；二是相信永远有人不会放弃你，他在远处等着你，只要你是你应该有的样子，他就一定会发现。而你现在的使命，就是慢慢变好。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>博客重新部署总结</title>
      <link href="/2018/04/09/%E5%8D%9A%E5%AE%A2%E9%87%8D%E6%96%B0%E9%83%A8%E7%BD%B2%E6%80%BB%E7%BB%93/"/>
      <url>/2018/04/09/%E5%8D%9A%E5%AE%A2%E9%87%8D%E6%96%B0%E9%83%A8%E7%BD%B2%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>这是一篇2017.08.16开始的的文章~<br>那段时间我的博客上传出现问题了~<i class="fa fa-taxi"></i><br><a id="more"></a><br>断断续续的修改了几次，每次也没用心去做。后来换了Mac，又重新部署了一下，今天终于整理好了，心情十分的好～之前部署的时候没有太在意流程，重新部署下来还是花了不少时间，决定把这个部署流程重新记录一下。</p><p>剩下的时间总结一下近期的学习，会上传到博客上的。</p><h1 id="你好"><a href="#你好" class="headerlink" title="你好"></a>你好</h1><h2 id="你好-1"><a href="#你好-1" class="headerlink" title="你好"></a>你好</h2><h4 id="你好-2"><a href="#你好-2" class="headerlink" title="你好"></a>你好</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">哈哈哈</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Github部署</title>
      <link href="/2017/12/17/Github%E9%83%A8%E7%BD%B2/"/>
      <url>/2017/12/17/Github%E9%83%A8%E7%BD%B2/</url>
      <content type="html"><![CDATA[<h3 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>1、初始化本地仓库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></p><p>2、连接远程仓库：<br>如果是第一次使用git，在使用git的时候会提示输入用户名和密码，用户名是自己的注册邮箱。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/sweetheartly/sweetheartly.github.io.git</span><br></pre></td></tr></table></figure></p><p>3、发布hexo到github page。清空、刷新、部署三个命令，可以一起执行。如果部署时不clean，可能之前修改的文章还存在。包括一些配置等，有时候部署完成后并没有改变，其实是缓存未清除。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure></p><p>4、添加文件到本地仓库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add</span><br></pre></td></tr></table></figure></p><p>5、提交声明<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &apos;内容&apos;</span><br></pre></td></tr></table></figure></p><p>6、推送到远程仓库（github）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></p><p>这里建议创建一个新的分支hexo，用于管理hexo文件。提交的的时候只提交hexo网站html、css、等源文件。而默认的master用来部署更新项目,具体可以看我的github地址分支情况 <a href="https://github.com/sweetheartly/sweetheartly.github.io" target="_blank" rel="noopener">https://github.com/sweetheartly/sweetheartly.github.io</a><br>创建并切换到新建分支：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b hexo</span><br></pre></td></tr></table></figure></p><p>将分支推送到远程仓库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin hexo</span><br></pre></td></tr></table></figure></p><p>这时打开网站 <a href="https://sweetheartly.github.io">https://sweetheartly.github.io</a> 就能看到效果了。</p><p>记得提交以后去github上把hexo分支设置默认，以后写文章等都要部署。<br>文章在hexo目录下的\source_posts文件夹中，是Markdown格式。</p><h3 id="进阶-绑定域名"><a href="#进阶-绑定域名" class="headerlink" title="进阶-绑定域名"></a>进阶-绑定域名</h3><p>域名可以自行去阿里云，景安等网站购买。一般都有系统提示步骤。<br>拿到域名之后，进行解析，推荐使用dnspod免费解析。<br>具体使用方法：<br>1、注册登录dnspod之后，添加域名，然后解析，添加两条记录<br>2、登录你注册域名网站的管理后台，修改DNS解析地址为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f1g1ns1.dnspod.net</span><br><span class="line">f1g1ns2.dnspod.net</span><br></pre></td></tr></table></figure></p><p>3、登录github，找到项目，设置setting，找到GitHub Pages<br>4、在master分支下的CNAME.MD文件写入注册的域名<br>再次访问差不多就好了，如果延迟的话，可能解析立马不会生效。需要等会儿才能看到。</p>]]></content>
      
      
        <tags>
            
            <tag> Github部署 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mac解决Apache2目录权限问题</title>
      <link href="/2017/11/29/%E8%A7%A3%E5%86%B3Apache2%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98/"/>
      <url>/2017/11/29/%E8%A7%A3%E5%86%B3Apache2%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>为apache配置虚拟主机，在httpd-vhosts.conf文件中进行简单设置，启动apache进行访问，却出现了You don’t have permission to access / on this server的提示，原因是我的虚拟主机目录为非apache安装目录下的 .htaccess，所以违反了apache对默认对网站根访问权限。如下所示：<br><a id="more"></a><br><img src="/ArticleImg/11-29mac权限/localhost权限.png" alt="image"></p><p>apache的默认虚拟主机根目录地址为/Library/WebServer/Documents/ , 方法如下：</p><ol><li>更改 Apache 默认网站根目录需更改 DocumentRoot、Directory .</li><li>还要记得改一下权限，将 httpd.conf 中的 AllowOverride none，Require all granted ，全部都改成 AllowOverride All，Require all granted ..</li><li>Options指令可以在Apache服务器核心配置(server config)、虚拟主机配置(virtual host)、特定目录配置(directory)以及.htaccess文件中使用。Options指令的主要作用是控制特定目录将启用哪些服务器特性。<br>Options FollowSymLinks为禁止Apache显示该目录结构，以上问题可以通过下边两种方式来解决：<br> 第一，添加Indexes： Options Indexes FollowSymLinks<br> 第二，将其注释，改为： Options All<br> 注意：在Indexes前，加 + 代表允许目录浏览；加 – 代表禁止目录浏览</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;Directory /&gt;</span><br><span class="line">    AllowOverride All</span><br><span class="line">    <span class="keyword">Require</span> all granted</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line">DocumentRoot <span class="string">"/Users/UserName/Documents/object"</span></span><br><span class="line">&lt;Directory <span class="string">"/Users/UserName/Documents/object"</span>&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Options FollowSymLinks Multiviews</span></span><br><span class="line">    <span class="comment"># MultiviewsMatch Any</span></span><br><span class="line">    Options All</span><br><span class="line">    </span><br><span class="line">    AllowOverride All</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Controls who can get stuff from this server.</span></span><br><span class="line">    <span class="keyword">Require</span> all granted</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure><p>重启Apache： sudo apachectl restart , 在浏览器输入对应地址即可 <i class="fa fa-yelp"></i></p>]]></content>
      
      <categories>
          
          <category> configuration </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Mac为Apache2配置虚拟主机</title>
      <link href="/2017/11/29/Mac%E4%B8%BAApache2%E9%85%8D%E7%BD%AE%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA/"/>
      <url>/2017/11/29/Mac%E4%B8%BAApache2%E9%85%8D%E7%BD%AE%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA/</url>
      <content type="html"><![CDATA[<p>Mac为Apache2配置虚拟主机</p>]]></content>
      
      <categories>
          
          <category> configuration </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>小猪佩奇</title>
      <link href="/2017/11/23/%E5%B0%8F%E7%8C%AA%E4%BD%A9%E5%A5%87/"/>
      <url>/2017/11/23/%E5%B0%8F%E7%8C%AA%E4%BD%A9%E5%A5%87/</url>
      <content type="html"><![CDATA[<p>Hey!<br>今天心情不错，给大家介绍一下，这是我的小佩奇～</p><a id="more"></a><p><img src="/img/佩奇1.0.jpeg" alt="image"></p><p>第一次画，把我的小佩奇都画丑了～这是个很好的放松的方式呢，以后休息的时候，可以慢慢在画几幅～</p>]]></content>
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 手描画-小猪佩奇 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo+Github搭建个人博客手记</title>
      <link href="/2017/11/17/Hexo+Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%89%8B%E8%AE%B0/"/>
      <url>/2017/11/17/Hexo+Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%89%8B%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>Hexo是一个快速、简介、高效的静态博客框架，让多个页面在几秒内瞬间完成渲染。Hexo基于Node.js，支持Giithub，可以整合Octopress等大多数插件，并自己也拥有强大的插件系统.<br><a id="more"></a></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h4 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h4><p>Hexo是基于Node.js的，需要首先安装npm工具，这个工具是Node.js安装包的工具，所以我们要首先安装Node.js.<br>使用apt-get安装Node.js：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install -y nodejs</span><br></pre></td></tr></table></figure></p><h4 id="安装npm"><a href="#安装npm" class="headerlink" title="安装npm"></a>安装npm</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install npm</span><br></pre></td></tr></table></figure><h4 id="使用npm安装Hexo"><a href="#使用npm安装Hexo" class="headerlink" title="使用npm安装Hexo"></a>使用npm安装Hexo</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h2 id="创建博客"><a href="#创建博客" class="headerlink" title="创建博客"></a>创建博客</h2><ol><li><p>Node和Git都安装好以后，在本地目录下建一个文件夹，如：MyBlog，进入该目录并安装Hexo.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install -g hexo</span><br></pre></td></tr></table></figure></li><li><p>初始化以后，执行init初始化命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure></li><li><p>生成静态页面命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate（hexo g也可以）</span><br></pre></td></tr></table></figure></li><li><p>本地预览，进行文章预览调试，命令如下： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server（hexo s也可以）</span><br></pre></td></tr></table></figure><p>浏览器输入  <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>   即可。</p></li><li>一些常用命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;postName&quot; #新建文章</span><br><span class="line">hexo new page &quot;pageName&quot; #新建页面</span><br><span class="line">hexo generate #生成静态页面至public目录</span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</span><br><span class="line">hexo deploy #将.deploy目录部署到GitHub</span><br><span class="line">hexo help  #查看帮助</span><br><span class="line">hexo version  </span><br><span class="line">Hexo如何让文章想只显示一部分和一个&quot;阅读全文&quot;的按钮:在文章中加 &lt;!--more--&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Github设置"><a href="#Github设置" class="headerlink" title="Github设置"></a>Github设置</h2><ol><li><p>github账号注册<br>Git是一种良好的、支持分支管理的代码管理方式，能很好地解决团队之间协作的问题。每个工程师在自己本地分支上开发，完成功能之后再将所有人的代码合并。<br>这个大家应该都有，没有的话就去注册一下吧！ Github地址：<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a> </p></li><li><p>创建Name仓库<br>建立与你用户名对应的仓库，仓库名必须为[your_user_name.github.io]，如图所示：<br><img src="/img/GitNewRepo.png" alt="image"></p></li><li><p>配置和使用github<br>如果用过Git的话，这一步就可以忽略了。没有用过的，下边可要认真看了。</p><p>3.1 首先需要检查你电脑是否已经有SSH key，运行 git Bash 客户端，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/.ssh</span><br><span class="line">$ ls</span><br></pre></td></tr></table></figure><p>检查是否已经存在id_rsa.pub或id_dsa.pub文件，如果文件已存在，那么可以跳过步骤2，直接操作步骤3。</p><p>3.2 创建一个SSH key，这里请注意：你需要把邮件地址换成你自己的邮件地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure><p>代码参数含义：<br>-t 指定密钥类型，默认是 rsa ，可以省略。<br>-C 设置注释文字，比如邮箱。<br>-f 指定密钥文件存储文件名。</p><p>以上代码省略了 -f 参数，因此，运行上面那条命令后会让你输入一个文件名，用于保存刚才生成的SSH key代码，以下会出现三次提示：<br>第一次提示，生成两个密钥，直接回车选择默认文件名（ id_rsa 和 id_rsa.pub ）；<br>接下来两次提示，输入密码和确认密码，是push文件时候的密码，当然也可不输入密码，直接回车。代码如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line"># Enter file in which to save the key (~/.ssh/id_rsa): [Press enter]</span><br><span class="line"></span><br><span class="line">Enter passphrase (empty for no passphrase): </span><br><span class="line"># Enter same passphrase again:</span><br></pre></td></tr></table></figure><p>当你看到下面这段代码的时候，那就说明，你的SSH key已经创建成功，你只需要添加到github的SSH key上就可以了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Your identification has been saved in ~/.ssh/id_rsa.</span><br><span class="line"># Your public key has been saved in ~/.ssh/id_rsa.pub.</span><br><span class="line"># The key fingerprint is:</span><br><span class="line"># 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com</span><br></pre></td></tr></table></figure><p>3.3 添加你的 SSH key 到 github上面去.首先你需要拷贝 id_rsa.pub 文件的内容.也可直接使用命令行来复制:<br>Mac下：pbcopy &lt; ~/.ssh/id_rsa.pub<br>Windows下：clip &lt; ~/.ssh/id_rsa.pub</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>登陆Github，<br>打开个人 Settings–&gt;SSH keys–&gt;Add SSH key，<br>Title 随便写，<br>Key 粘贴之前复制的内容，<br>这样 SSH key 就添加的 GitHub。</p><p>3.4 检测SSH key是否可以访问Github，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>当你输入以上代码时，会有一段警告代码，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host &apos;github.com (207.97.227.239)&apos; can&apos;t be established.</span><br><span class="line"># RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span><br><span class="line"># Are you sure you want to continue connecting (yes/no)?</span><br></pre></td></tr></table></figure><p>这是正常的，你输入 yes 回车既可。如果你创建 SSH key 的时候设置了密码，接下来就会提示你输入密码，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase for key &apos;~/.ssh/id_rsa&apos;:</span><br></pre></td></tr></table></figure><p>当然如果你密码输错了，会再要求你输入，直到对了为止。<br>注意：输入密码时如果输错一个字就会不正确，使用删除键是无法更正的。<br>密码正确后你会看到下面这段话，如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi sweetheartly! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><p>如果用户名是正确的,你已经成功设置SSH密钥。如果你看到 “access denied” ，者表示拒绝访问，那么你就需要使用 https 去访问，而不是 SSH 。</p><p>3.5 设置Git全局用户配置，这一步不是很重要，但是如果与之前所有的git账户不一致，Github会要求必须声明的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;xxx&quot;</span><br><span class="line">$ git config --global user.email xxx@gmail.com</span><br></pre></td></tr></table></figure></li></ol><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><ol><li><p>打开Hexo博客目录下的_config.yml，推荐使用VS code，尽量不要用记事本打开，可能会出现乱码（如果出现乱码，一定要用编辑器将文件编码格式改为：UTF-8）。repo: 找到自己对应的仓库，branch选择主分支.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:sweetheartly/sweetheartly.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></li><li><p>通过shell命令找到Hexo所在的目录（这里我的是：MyBlog），安装hexo-deployer-git部署所需要的插件，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p>清除public目录下的缓存文件，文件生成后立即部署网站,部署之前预先生成静态文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure></li><li><p>在浏览器输入<a href="https://sweetheartly.github.io/">https://sweetheartly.github.io/</a>, sweetheartly是个人github的名字，如图所示：<br><img src="/img/GitPreview.png" alt="image"></p></li></ol><p>好了，到这里就结束了。如果你有什么疑问或指正，请留言。</p><p>参考文档： <a href="https://www.liaoxuefeng.com" target="_blank" rel="noopener">https://www.liaoxuefeng.com</a>        =&gt; Git教程<br>参考文档： <a href="http://blog.csdn.net/binyao02123202/article/details/20130891" target="_blank" rel="noopener">http://blog.csdn.net/binyao02123202/article/details/20130891</a><br>参考文档：<a href="http://www.jianshu.com/p/21234432c94e" target="_blank" rel="noopener">http://www.jianshu.com/p/21234432c94e</a></p>]]></content>
      
      <categories>
          
          <category> Learning Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo个人博客 </tag>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>博客重新部署总结</title>
      <link href="/2017/11/17/DeployCompleted/"/>
      <url>/2017/11/17/DeployCompleted/</url>
      <content type="html"><![CDATA[<p>这是一篇2017.08.16开始的的文章~ <i class="fa fa-yelp"></i><br>那段时间我的博客上传出现问题了~</p><p>断断续续的修改了几次，每次也没用心去做。<a id="more"></a>后来换了Mac，又重新部署了一下，今天终于整理好了，心情十分的好～之前部署的时候没有太在意流程，重新部署下来还是花了不少时间，决定把这个部署流程重新记录一下。</p><p>剩下的时间总结一下近期的学习，会上传到博客上的。</p>]]></content>
      
      
        <tags>
            
            <tag> 个人博客部署总结 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>happy</title>
      <link href="/2017/07/23/happy/"/>
      <url>/2017/07/23/happy/</url>
      <content type="html"><![CDATA[<p>我很随便的写了一篇文章。</p><p>真的，就是这么随便！</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>VS Code使用Emmet解决html代码自动补全</title>
      <link href="/2017/07/21/VS%20Code%E4%BD%BF%E7%94%A8Emmet%E8%A7%A3%E5%86%B3html%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/"/>
      <url>/2017/07/21/VS%20Code%E4%BD%BF%E7%94%A8Emmet%E8%A7%A3%E5%86%B3html%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/</url>
      <content type="html"><![CDATA[<h2 id="VS-Code在一般的-vue文件下，HTML代码是不能自动补全标签的，即便安装了-Vetur-也不行，要想解决这个问题，就用到了Emmet插件。"><a href="#VS-Code在一般的-vue文件下，HTML代码是不能自动补全标签的，即便安装了-Vetur-也不行，要想解决这个问题，就用到了Emmet插件。" class="headerlink" title="VS Code在一般的.vue文件下，HTML代码是不能自动补全标签的，即便安装了 Vetur 也不行，要想解决这个问题，就用到了Emmet插件。"></a>VS Code在一般的.vue文件下，HTML代码是不能自动补全标签的，即便安装了 Vetur 也不行，要想解决这个问题，就用到了Emmet插件。</h2><a id="more"></a><h2 id="Emmet"><a href="#Emmet" class="headerlink" title="Emmet"></a>Emmet</h2><p>Emmet(前身为 Zen Coding)，如果你从事Web前端开发的话，对该插件一定不会陌生。VsCode 内置了 Emmet 语法，使用仿 CSS 选择器的语法来生成代码，然后立刻生成对应的 HTML 结构或者 CSS 代码，同时还有多种实用的功能帮助进行前端开发，极大的提高代码编写的效率.</p><h3 id="Screenshot-文件后缀为-vue-："><a href="#Screenshot-文件后缀为-vue-：" class="headerlink" title="Screenshot ( 文件后缀为 .vue )："></a>Screenshot ( 文件后缀为 .vue )：</h3><p><img src="/img/vs_p.gif" alt="image"></p><h3 id="安装Emmet插件"><a href="#安装Emmet插件" class="headerlink" title="安装Emmet插件"></a>安装Emmet插件</h3><p><img src="/img/emmet.png" alt="image"></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>执行”文件 -&gt; 首选项 -&gt; 设置”,添加如下配置：<br><img src="/img/setting.png" alt="image"><br>代码如下:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"emmet.syntaxProfiles": &#123;</span><br><span class="line">    "vue-html": "html",</span><br><span class="line">    "vue": "html"</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>然后就ok了.  另外,推荐几个VS Code 常用插件&lt;快捷键：ctrl + shift + x &gt;：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Auto Close Tag    自动闭合HTML标签</span><br><span class="line">Auto Rename Tag   修改HTML标签时，自动修改匹配的标签</span><br><span class="line">HTML CSS Support  css提示（支持vue）</span><br></pre></td></tr></table></figure></p><h2 id="以下是一些常用的基本语法"><a href="#以下是一些常用的基本语法" class="headerlink" title="以下是一些常用的基本语法"></a>以下是一些常用的基本语法</h2><h3 id="嵌套操作符-Nesting-operators"><a href="#嵌套操作符-Nesting-operators" class="headerlink" title="嵌套操作符(Nesting operators)"></a>嵌套操作符(Nesting operators)</h3><p>嵌套操作符用于将缩写元素放置在生成的树中,是否应放置在上下文元素的内部或附近.</p><h4 id="子级-gt-通过-gt-标识元素可以生成嵌套子级元素-可以配合元素属性进行连写"><a href="#子级-gt-通过-gt-标识元素可以生成嵌套子级元素-可以配合元素属性进行连写" class="headerlink" title="子级:&gt;    通过&gt;标识元素可以生成嵌套子级元素,可以配合元素属性进行连写"></a>子级:&gt;    通过&gt;标识元素可以生成嵌套子级元素,可以配合元素属性进行连写</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">div#pageId&gt;ul&gt;li  =&gt; </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"pageId"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="同级-字符表示生成兄弟级元素"><a href="#同级-字符表示生成兄弟级元素" class="headerlink" title="同级:+    +字符表示生成兄弟级元素."></a>同级:+    +字符表示生成兄弟级元素.</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div#pageId+div.child  =&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"pageId"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="父级-用于生成父级元素的同级元素-从这个-字符所在位置开始-查找左侧最近的元素的父级元素并生成其兄弟级元素"><a href="#父级-用于生成父级元素的同级元素-从这个-字符所在位置开始-查找左侧最近的元素的父级元素并生成其兄弟级元素" class="headerlink" title="父级:^    ^用于生成父级元素的同级元素,从这个^字符所在位置开始,查找左侧最近的元素的父级元素并生成其兄弟级元素."></a>父级:^    ^用于生成父级元素的同级元素,从这个^字符所在位置开始,查找左侧最近的元素的父级元素并生成其兄弟级元素.</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">div&gt;p.parent&gt;span.child^ul.brother&gt;li  =&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"brother"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="分组操作符-Grouping"><a href="#分组操作符-Grouping" class="headerlink" title="分组操作符(Grouping)"></a>分组操作符(Grouping)</h3><p>分组使用( )来实现缩写的分离.比如这个例子,如果不加括号那么 a 将作为 span 的子级元素生成.加上括号 a 将于( )内的元素同级.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">div&gt;(ul&gt;li+span)&gt;a  =&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="乘法-Multiplication"><a href="#乘法-Multiplication" class="headerlink" title="乘法(Multiplication)"></a>乘法(Multiplication)</h3><p>使用N即可自动生成重复项.N是一个正整数.在使用时请注意N所在位置,位置不同生成的结果不同.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ul&gt;li*3  =&gt;</span><br><span class="line">=&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="自动计数-numbering"><a href="#自动计数-numbering" class="headerlink" title="自动计数(numbering)"></a>自动计数(numbering)</h3><p>这个功能挺方便的对于生成重复项时增加一个序号,只需要加上$符号即可.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ul&gt;li.item$&#123;item number:$&#125;*3  =&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item1"</span>&gt;</span>item number:1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item2"</span>&gt;</span>item number:2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item3"</span>&gt;</span>item number:3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="使用-修饰符，可以更改编号方向（升序或降序）和基数（例如起始值）-注意这个操作符在-之后添加"><a href="#使用-修饰符，可以更改编号方向（升序或降序）和基数（例如起始值）-注意这个操作符在-之后添加" class="headerlink" title="使用@修饰符，可以更改编号方向（升序或降序）和基数（例如起始值）.注意这个操作符在$之后添加"></a>使用@修饰符，可以更改编号方向（升序或降序）和基数（例如起始值）.注意这个操作符在$之后添加</h3><p>@-表示降序,@+表示升序,默认使用升序.<br>@N可以改变起始值.需要注意的是如果配合升降序使用的话N是放到+-符后.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ul&gt;li.item$@-*3  =&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item3"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item2"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item1"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="再来个配合嵌套元素和计数的大栗子"><a href="#再来个配合嵌套元素和计数的大栗子" class="headerlink" title="再来个配合嵌套元素和计数的大栗子."></a>再来个配合嵌套元素和计数的大栗子.</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div.nav&gt;(nav#navbar&gt;(ul&gt;li&gt;(a[href="/xxx/product/$" data-index=$]&gt;lorem4)*5))+div.btn[type='button']&gt;span&#123;--&#125;^^div#main =&gt;</span><br></pre></td></tr></table></figure><p>这个有点复杂,看下效果:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span> <span class="attr">id</span>=<span class="string">"navbar"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/xxx/product/1"</span> <span class="attr">data-index</span>=<span class="string">"1"</span>&gt;</span>Lorem ipsum dolor sit.<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/xxx/product/2"</span> <span class="attr">data-index</span>=<span class="string">"2"</span>&gt;</span>Dolor vel, quia quas.<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/xxx/product/3"</span> <span class="attr">data-index</span>=<span class="string">"3"</span>&gt;</span>Qui hic, corrupti eum!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/xxx/product/4"</span> <span class="attr">data-index</span>=<span class="string">"4"</span>&gt;</span>Necessitatibus perspiciatis, corrupti. Praesentium!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/xxx/product/5"</span> <span class="attr">data-index</span>=<span class="string">"5"</span>&gt;</span>Nostrum quos, voluptate. Velit!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>--<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="最后一个，包装文本："><a href="#最后一个，包装文本：" class="headerlink" title="最后一个，包装文本："></a>最后一个，包装文本：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">            首页</span><br><span class="line">            产品介绍</span><br><span class="line">            相关案例</span><br><span class="line">            关于我们</span><br><span class="line">            联系我们</span><br><span class="line"></span><br><span class="line">而我们预期的效果是这样:</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>产品介绍<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>相关案例<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>关于我们<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>联系我们<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>选中文本,按下 “ctrl+shift+p” 打开命令窗口输入”ewrap”</li><li>选择Emmet:使用缩写进行包装 (Wrap with Abbreviation) 选项</li><li>输入缩写字符 nav&gt;ul&gt;li* 按下回车键即可看到效果.</li></ol><h3 id="原文链接：http-www-cnblogs-com-summit7ca-p-6944215-html"><a href="#原文链接：http-www-cnblogs-com-summit7ca-p-6944215-html" class="headerlink" title="原文链接：http://www.cnblogs.com/summit7ca/p/6944215.html"></a>原文链接：<a href="http://www.cnblogs.com/summit7ca/p/6944215.html" target="_blank" rel="noopener">http://www.cnblogs.com/summit7ca/p/6944215.html</a></h3>]]></content>
      
      <categories>
          
          <category> Learning Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue文件中html代码自动补全 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>测试1</title>
      <link href="/2017/07/19/Test/"/>
      <url>/2017/07/19/Test/</url>
      <content type="html"><![CDATA[<p>这是我用来测试的一篇文章。</p><p>你看见了吗？</p><p><img src="/img/smiles.jpg" alt="image"></p>]]></content>
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试1 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo new article</title>
      <link href="/2017/07/19/hello-world/"/>
      <url>/2017/07/19/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><a id="more"></a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      <categories>
          
          <category> Learning Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo new article </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>摔跤吧,爸爸</title>
      <link href="/2017/07/18/WrestlingSence/"/>
      <url>/2017/07/18/WrestlingSence/</url>
      <content type="html"><![CDATA[<p>时间：2017.07.18   PM 1:30<br>地点：科院 0#906<br>人员：三月小组在校生 </p><p>今天看了一部电影——“摔跤吧 爸爸”，听到这个名字，首先我觉得肯定是个男孩，因为只有男孩才会喜欢摔跤吧！女孩子一般不会这么粗鲁的。<br><a id="more"></a></p><p>故事就这么开始了。首先映入演练的是个拿过摔跤冠军的父亲，他有一个很远大的理想，代表印度拿下世界摔跤冠军。这个愿望一直没能实现，后来就寄希望于自己的孩子能够替他完成梦想。偶然发现了他的女儿有摔跤的潜质后，他就开始逼迫他的两个女儿进行训练。努力让他的女儿成为世界级冠军。在这个男权主导的社会环境下，吉他两姐妹练习摔跤成为了全村人的笑柄，受到了同学们的冷嘲热讽，最终突破自我拿下了世界冠军的故事。</p><p>奖牌不会长在树上。这部影片很励志，剧中每每透漏着坚持与不易。成功不是白白得来的，奖牌也不会长在树上，和天上不会掉馅饼一样，只有努力拼搏，拥有矢志不移的意志和顽强的意志力才有所成就。为了让他们变得更加强壮，父亲不顾母亲的反驳，坚持让她们吃鸡肉；长发干扰了训练，不顾吉塔的反驳，父亲毅然剪掉了她们的长发。吉塔的成功离不开训练和父亲的严格要求，我们想要成功亦是如此。当你羡慕别人站在舞台上光彩夺目的时候，你可曾想过，他每天早上5点就起床开始锻炼身体，当你在梦中的时候，别人就已经完成了今天的计划。每个人的成功，都与他付出的汗水成正比。</p><p>做事首先要客服心理障碍。当吉塔第一次参加摔跤比赛的时候，场上有几个不同类型的对手供他挑战，然而她选择了最强的一个。要想战胜别人，首先要战胜自己内心的恐惧。他选择了强者，证明她对自己也有信心，敢于去挑战强者，虽然比赛输了，也在比赛中找到了自己的不足。在比赛的关键时刻，吉塔回想小时候父亲强迫她们跳入冰冷的湖水中，父亲则在岸上说，记住，不是每一次我都能赶过来帮助你，要相信你自己。这一次的突破不仅仅是拿到了国家级金牌，更战胜了自我，突破了人生的额新征程。换做我们自己，做事的时候，总是想走捷径，尽快达到目的，因为未知的恐惧却忽略的这路途中锻炼，磕磕绊绊未免是不好的，些许在这途中就有意想不到的收获呢。</p><p>有个良师是非常重要的。吉塔的成功，一大部分是来自于这个冠军的父亲的正确指导。幼年的时候，吉塔的父亲就发现了吉塔具备很好的摔跤潜质，加之正确的指导，慢慢让吉塔也爱上了摔跤运动。国家比赛中，吉塔用教练的方法连连失败，因为教练没有从吉塔自身的优势去引导，而她的父亲更加了解吉塔，明白吉塔的优势是攻击，比赛时发挥她的优势，进入了决赛。决赛时，他又分析了对手的优势，交给吉塔正确的方法去应对。放在中国这个开放的社会中，父母总觉得孩子好好学习就对了，却忽略了孩子身上原有的潜能。</p><p>不忘初心，放得始终。获得第一枚国家金牌以后，吉塔进入了国家训练馆开始了新的训练。训练馆设备好，新事物多，很快吉塔就在这些花花世界迷失了自我。所幸她及时醒悟，恢复了过来。仔细分析了自己的错误与不足，迎来了最终的胜利。这让我们明白了胜利也不要骄傲，骄傲必定失败。</p><p>人生在于选择，逆境永远是相对存在的。选择怎样的人生，决定权永远在自己的手中，是不是拥有坚定不移的信念，朝着自己决定的方向一如既往的努力前行，这条道路势必不会都是坦途，历经风雨的洗礼，终有一天会在自己选择的道路终点实现自己的人生价值。</p><p><span style="float: right;">2017年7月18日</span></p>]]></content>
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 摔跤吧,爸爸 观后感 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
